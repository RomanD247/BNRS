from nicegui import ui
from collections import deque

def main():
    max_buffer_length = 100       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞

    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
    dialog = ui.dialog()

    with dialog.props('persistent') as dialog, ui.card():
        ui.label('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...')
        result_label = ui.label()
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        ui.button('–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥', on_click=lambda: close_dialog())

    all_keys = deque(maxlen=max_buffer_length)

    def process_input(entered_sequence):
        result_label.text = f'üéâ –í—ã –Ω–∞–±—Ä–∞–ª–∏: {entered_sequence}'
        print(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {entered_sequence}")
        close_dialog()

    def on_key(e):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏ (keyup)
        if not e.action.keyup:
            return

        key_str = str(e.key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞—Ç–∞—è –∫–ª–∞–≤–∏—à–∞ Enter
        if e.key == 'Enter':
            entered_text = "".join(list(all_keys))
            process_input(entered_text)
            keyboard.active = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ Enter
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –±—É—Ñ–µ—Ä
        if len(key_str) == 1 and key_str.isprintable():
            all_keys.append(key_str)
            print("–ù–∞–±—Ä–∞–Ω–æ: ", "".join(all_keys))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—ã–∫–ª—é—á–∞–µ–º –µ–≥–æ –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
    keyboard = ui.keyboard(on_key)
    keyboard.active = False

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∫–ª–∞–≤–∏—à
    def open_dialog():
        all_keys.clear()  # –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        result_label.text = '' # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard.active = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à
        dialog.open()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∫–ª–∞–≤–∏—à
    def close_dialog():
        keyboard.active = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à
        dialog.close()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
    ui.button('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥', on_click=open_dialog)

if __name__ in {'__main__', '__mp_main__'}:
    main()
    ui.run()


    '''–ù–∏–∂–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞
    –û–Ω –æ–±—ë—Ä–Ω—É—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –≤ –ø—Ä–∏–º–µ—Ä–µ main()'''

from nicegui import ui
from collections import deque
import asyncio

async def get_user_input(prompt_message: str) -> str:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è Enter.

    Args:
        prompt_message: –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ.

    Returns:
        –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∞).
    """
    result = ""
    all_keys = deque()
    dialog = ui.dialog()
    closed = asyncio.Future()

    def on_key(e):
        nonlocal result
        if not e.action.keyup:
            return

        key_str = str(e.key)

        if e.key == 'Enter':
            result = "".join(list(all_keys))
            keyboard.active = False
            dialog.close()
            closed.set_result(None)  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            return

        if len(key_str) == 1 and key_str.isprintable():
            all_keys.append(key_str)
            print("–ù–∞–±—Ä–∞–Ω–æ: ", "".join(all_keys))

    def close_dialog():
        keyboard.active = False
        dialog.close()
        closed.set_result(None) # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–µ–∑ Enter

    with dialog, ui.card():
        ui.label(prompt_message)
        input_display = ui.label()

        def update_display():
            input_display.text = "".join(list(all_keys))

        #ui.timer(0.1, update_display, active=True) # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–æ–¥–∞

        ui.button('–ó–∞–∫—Ä—ã—Ç—å', on_click=close_dialog)

        keyboard = ui.keyboard(on_key)
        keyboard.active = True

    dialog.open()
    await closed  # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç (—á–µ—Ä–µ–∑ Enter –∏–ª–∏ –∫–Ω–æ–ø–∫—É)
    return result

def main():
    async def handle_input():
        message = "Please scan you personal pass card!"
        name = await get_user_input(message)
        ui.notify(f"–í—ã –≤–≤–µ–ª–∏: {name}")

        message = "Please, scan device's tag you want to rent!"
        color = await get_user_input(message)
        ui.notify(f"–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {color}")

    ui.button("SCAN", on_click=handle_input)

if __name__ in {'__main__', '__mp_main__'}:
    main()
    ui.run()